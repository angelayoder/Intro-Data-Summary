---
title: "WGCNA Section 4: Interfacing network analysis with other data such as functional
annotation and gene ontology"
author: "Angela Yoder"
date: "`r Sys.Date()`"
---

**The goals of this program are:**

1. Enrichment analysis for modules

```{r, echo = F, results = 'hide', message = F, warning = F}
# Data input

# set working directory
setwd("C:/Users/angel/OneDrive/Desktop/Saba Lab/Data/")

# upload data
phen = read.csv("Phenotype_WGCNA.csv")
protein_brain = read.csv("Brain_WGCNA.csv")
moduleColors= read.csv("moduleColors_block_WGCNA.csv")
chosenModules = read.csv("Chosen Modules.csv")

# fix problems
moduleColors = moduleColors[,2]
names = protein_brain[,1]
protein_brain = protein_brain[,2:dim(protein_brain)[2]]
rownames(protein_brain) = names

names = phen[,1]
phen = phen[,2:5]
rownames(phen) = names 

# Read in the probe annotation
setwd("C:/Users/angel/OneDrive/Desktop/Saba Lab/Data/")
annot = read.csv(file = "Annotation.csv");
annot = annot[,2:dim(annot)[2]]

library(WGCNA)
library(tidyverse)



```
Move this section to a different document before knitting- save you some trouble
```{r}

# Annotation Data

library(biomaRt)

ensembl = useEnsembl(biomart="ensembl")
ensembl = useEnsembl(biomart="ensembl",dataset = "rnorvegicus_gene_ensembl")

get_attrib <- listAttributes(ensembl)
go_attrib <- get_attrib[grep("GO ",get_attrib$description),]


get_GO = getBM(attributes=c("ensembl_gene_id",
                              "external_gene_name",
                              "description",
                              "chromosome_name",
                              "start_position",
                              "end_position",
                              "gene_biotype",
                            "go_id",
                            "name_1006",
                            "definition_1006","go_linkage_type","namespace_1003"),
                 filters = 'biotype',
                 values = "protein_coding",
                 mart = ensembl)

GO_fin = subset(get_GO, get_GO$ensembl_gene_id %in% colnames(protein_brain))

setwd("C:/Users/angel/OneDrive/Desktop/Saba Lab/Data/")
write.csv(GO_fin, "Annotation.csv")


```
I don't know what the output of this is...
```{r}

# Match probes in the data set to the probe IDs in the annotation file
probes = names(protein_brain)
probes2annot = match(probes, annot$ensembl_gene_id)
# Get the corresponding Locuis Link IDs
allLLIDs = annot$external_gene_name[probes2annot];

# $ Choose interesting modules
intModules = chosenModules[,1]
for (i in 1:length(intModules))
{
  b = sub("ME", "", intModules[i])
  intModules[i] = b
}
setwd("C:/Users/angel/OneDrive/Desktop/Saba Lab/Data/EnsemblGeneIDs/")
for (module in intModules)
{
# Select module probes
modGenes = (moduleColors==module)
# Get their entrez ID codes
modLLIDs = allLLIDs[modGenes];
# Write them into a file

fileName = paste("EnsemblGeneIDs-", module, ".txt", sep="");
write.table(as.data.frame(modLLIDs), file = fileName,
row.names = FALSE, col.names = FALSE)
}
# As background in the enrichment analysis, we will use all probes in the analysis.

fileName = paste("EnsemblGeneIDs-all.txt", sep="");
#write.table(as.data.frame(allLLIDs), file = fileName,
#row.names = FALSE, col.names = FALSE)

```
I have no idea what to think
```{r}
library(anRichment)
GOcollection = buildGOcollection(organism = "rat")

entrez = convert2entrez(organism = "rat", symbol = allLLIDs);

#GOenr = enrichmentAnalysis(classLabels = moduleColors, identifiers = allLLIDs);

#GOenr = GOenrichmentAnalysis(moduleColors, allLLIDs, organism = "rat", nBestP = 10);
GOenr = enrichmentAnalysis(
  classLabels = moduleColors, identifiers = entrez,
  refCollection = GOcollection,
  useBackground = "given",
  threshold = 0.05,
  getFDR = T, 
  thresholdType = "FDR",
  getOverlapEntrez = TRUE,
  getOverlapSymbols = TRUE,
  ignoreLabels = "grey");


# it wants to store the best 10 terms from modulecolors. Doesn't seem to be an easy function in the new function. Tried nBestDataSets, but there wasn't a change in the output, nor was there a new way to call for the 10 best. 

#tab = GOenr$bestPTerms[[4]]$enrichment
tab = GOenr$enrichmentTable
tab = tab[tab$FDR < 0.05,]
tab10 = tab[tab$rank <= 10, ]



#setwd("C:/Users/angel/OneDrive/Desktop/Saba Lab/Data/GeneID tables/")

write.table(tab, file = "GOEnrichmentTable.csv", sep = ",", quote = TRUE, row.names = FALSE)



```
This one is a bit useless
```{r}
keepCols = c(1, 2, 5, 6, 7, 12, 13);
screenTab = tab[, keepCols];
# Round the numeric columns to 2 decimal places:
numCols = c(3, 4);
screenTab[, numCols] = signif(apply(screenTab[, numCols], 2, as.numeric), 2)
# Truncate the the term name to at most 40 characters
screenTab[, 7] = substring(screenTab[, 7], 1, 40)
# Shorten the column names:
colnames(screenTab) = c("module", "size", "p-val", "Bonf", "nInTerm", "ont", "term name");
rownames(screenTab) = NULL;
# Set the width of Râ€™s output. The reader should play with this number to obtain satisfactory output.
options(width=95)
# Finally, display the enrichment table:
screenTab


```
